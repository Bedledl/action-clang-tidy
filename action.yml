name: "action-clang-tidy"
description: "Check repository using clang-tidy"
author: "HorstBaerbel / Bim Overbohm"
branding:
  icon: check-circle
  color: gray-dark
inputs:
  scandir:
    description: "Scan directory"
    required: false
    default: "."
  builddir:
    description: "Build directory"
    required: false
    default: "build"
  excludedirs:
    description: "Exclude directories"
    required: false
    default: ""
  extensions:
    description: "File extensions to include in check"
    required: false
    default: "c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx"
  cmakeoptions:
    description: "Additional options to pass to cmake"
    required: false
    default: ""
  useexistingbuild:
    description: "Use existing build"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - if: ${{ inputs.useexistingbuild == false }}
      shell: bash
      run: echo "1 Running cmake in docker container"

    - if: ${{ inputs.useexistingbuild }} == false
      shell: bash
      run: echo "2 Running cmake in docker container"

    - if: ${{ inputs.useexistingbuild == true }}
      shell: bash
      run: echo "3 Using existing build"

    - if: ${{ inputs.useexistingbuild }} == true
      shell: bash
      run: echo "4  Using existing build"

    - if: ${{ inputs.useexistingbuild == false }}
      uses: ./action-clang-tidy/build_within_docker
      with:
        scandir: ${{ inputs.scandir }}
        builddir: ${{ inputs.builddir }}
        excludedirs: ${{ inputs.excludedirs }}
        extensions: ${{ inputs.extensions }}
        cmakeoptions: ${{ inputs.cmakeoptions }}

    - if: ${{ inputs.useexistingbuild == true }}
      uses: ./action-clang-tidy/use_existing_build
      with:
        scandir: ${{ inputs.scandir }}
        builddir: ${{ inputs.builddir }}
        excludedirs: ${{ inputs.excludedirs }}
        extensions: ${{ inputs.extensions }}
